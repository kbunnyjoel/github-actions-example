# Required variables for this template:
#   aws_account_id: AWS Account number (string)
#   aws_region: AWS Region (e.g., ap-southeast-2)
#   app_name: ECR repository name (string)
#   image_tag: Tag for the container image (string)
#   acm_certificate_arn: ACM Certificate ARN for ALB (string)

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: github-actions-example
  namespace: argocd # Your ArgoCD installation namespace
  finalizers:
    - resources-finalizer.argocd.argoproj.io # Ensures Kubernetes resources are deleted when the ArgoCD Application is deleted
spec:
  project: default # Your ArgoCD project
  source:
    repoURL: https://github.com/kbunnyjoel/github-actions-example # URL of the Git repository where your Helm chart is located
    targetRevision: feature/improvements # Git branch/tag/commit to sync from
    path: apps/gha/chart # Path to the Helm chart within the repository (e.g., apps/nodejs/chart)
    helm:
      values: |
        replicaCount: 1 # Default replica count, can be overridden
        image:
          repository: docker.io/***/github-actions-example # Docker Hub image repository
          tag: d2e5199bf4bccbc69fd1ff83daf2ca38fe4fbf2b
          pullPolicy: IfNotPresent

        containerPort: 3000 # The port your Node.js application listens on inside the container

        service:
          type: ClusterIP # Changed from LoadBalancer
          ports: # Ensure your Helm chart's service template uses this structure
            - name: http # Name of the port, referenced by Ingress
              port: 80 # Service's port
              targetPort: 3000 # Target the containerPort directly, assuming it's 3000 as per containerPort and probes.
              protocol: TCP
          # annotations: {} # Service annotations are generally not needed for ClusterIP with Ingress
          
        # SSL/TLS is terminated at the AWS NLB using ACM; do NOT enable TLS/SSL or redirects at the Ingress level.
        ingress:
          enabled: true
          className: "alb"
          hostname: "gha.bunnycloud.xyz"
          path: "/"
          pathType: "Prefix"
          annotations:
            kubernetes.io/ingress.class: "alb"
            alb.ingress.kubernetes.io/scheme: internet-facing
            alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
            alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:ap-southeast-2:806210429052:certificate/d877d8be-7c2c-447a-a397-99fff3ac0ef1"
            alb.ingress.kubernetes.io/target-type: ip
            alb.ingress.kubernetes.io/backend-protocol: HTTP
            external-dns.alpha.kubernetes.io/ttl: "60"
            external-dns.alpha.kubernetes.io/hostname: "gha.bunnycloud.xyz."
        # Define resource requests and limits for your application pods
        resources: {} # Leave empty to use Helm chart defaults or override as needed
        #  limits:
        #    cpu: 200m
        #    memory: 256Mi
        #  requests:
        #    cpu: 100m
        #    memory: 128Mi

        livenessProbe:
          httpGet:
            path: /status # Your application's liveness probe endpoint
            port: 3000   # Target the containerPort directly or a named port on the container (e.g., 'http')
          initialDelaySeconds: 15
          periodSeconds: 20

        readinessProbe:
          httpGet:
            path: /status # Your application's readiness probe endpoint
            port: 3000    # Target the containerPort directly or a named port on the container
          initialDelaySeconds: 5
          periodSeconds: 10

        # No longer using externalDNS.elbTarget as it causes template rendering issues
  destination:
    server: https://kubernetes.default.svc # Target Kubernetes API server
    namespace: github-actions-example # Namespace to deploy the application into (e.g., "nodejs")
  syncPolicy:
    automated:
      prune: true # Automatically delete resources that are no longer defined in Git
      selfHeal: true # Automatically sync if the live state drifts from the desired state in Git
    syncOptions:
    - CreateNamespace=true # Automatically create the target namespace if it doesn't exist
