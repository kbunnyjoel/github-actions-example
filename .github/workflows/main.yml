name: Nodejs CI with code coverage

on:
  workflow_dispatch:
    inputs:
      number1:
        description: 'First number to add'
        required: true
        type: number
      number2:
        description: 'Second number to add'
        required: true
        type: number

  push:
    branches: [ main ]
  pull_request:
    branches: [ main, 'feature/*' ]

jobs:
  buil-and-test:
    runs-on: ubuntu-latest

    env:
      NUMBER1: ${{ github.event.inputs.number1 }}
      NUMBER2: ${{ github.event.inputs.number2 }}

    strategy:
      matrix:
        node-version: [18.x, 20.x] # Test on multiple Node.js versions

    steps:
    
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: List files in workspace
      run: ls -l
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm' # Cache npm dependencies

    - name: Install dependencies
      run: npm ci # Use ci for cleaner installs from package-lock.json

    - name: Run tests and collect coverage
      run: npm test # This will now run 'jest --coverage'

    - name: Debug input values
      run: |
        echo "NUMBER1=${NUMBER1}"
        echo "NUMBER2=${NUMBER2}"
      env:
        NUMBER1: ${{ github.event.inputs.number1 }}
        NUMBER2: ${{ github.event.inputs.number2 }}

    - name: Start Node server in background
      # run: |
      #   nohup npm start > server.log 2>&1 &
      #   sleep 5
      #   curl --fail http://localhost:3000/status || (echo "Server failed to start" && exit 1)
      run: |
        npm start &
      env:
        INPUT_NUMBER1: ${{ github.event.inputs.number1 }}
        INPUT_NUMBER2: ${{ github.event.inputs.number2 }}

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-node-${{ matrix.node-version }}
        path: coverage/ # Upload the entire coverage directory


  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: buil-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GHCR login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Container Registry push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # tags: ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ github.sha }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ steps.vars.outputs.sha_short }}
            ghcr.io/${{ github.repository_owner }}/my-node-app:${{ steps.vars.outputs.sha_short }}
      
      - name: Run Docker container in background
        run: docker run -d -p 3000:3000 --name live-app ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ steps.vars.outputs.sha_short }}

      - name: Wait for app to be ready
        run: |
          for i in {1..10}; do
            curl --fail http://localhost:3000/status && exit 0
            sleep 2
          done
          echo "App did not become ready" && exit 1
    
  dev-deploy:
      name: Deploy to dev environment
      runs-on: ubuntu-latest
      needs: docker
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Install Kubernetes CLI
          uses: azure/setup-kubectl@v4
          with:
            version: 'v1.31.0' # Specify the version of kubectl you want to install
        
        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version --short
            kubectl get nodes
            kubectl config view
            echo "KUBE_CONFIG_DATA=${{ secrets.KUBE_CONFIG_DATA }}" >> $GITHUB_ENV
            echo "KUBE_CONTEXT=${{ secrets.KUBE_CONTEXT }}" >> $GITHUB_ENV
