name: Nodejs CI with code coverage

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set to true to destroy the EKS cluster'
        required: false
        default: 'false'
      run_terraform:
        description: 'Run tests? (true/false)'
        required: false
        default: 'true'

  push:
    branches: [ main ]
  pull_request:
    branches: [ main, 'feature/*' ]

jobs:
  buil-and-test:
    runs-on: ubuntu-latest

    env:
      NUMBER1: ${{ github.event.inputs.number1 }}
      NUMBER2: ${{ github.event.inputs.number2 }}

    strategy:
      matrix:
        node-version: [18.x, 20.x] # Test on multiple Node.js versions

    steps:
    
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: List files in workspace
      run: ls -l
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm' # Cache npm dependencies

    - name: Install dependencies
      run: npm ci # Use ci for cleaner installs from package-lock.json

    - name: Run tests and collect coverage
      run: npm test # This will now run 'jest --coverage'

    - name: Debug input values
      run: |
        echo "NUMBER1=${NUMBER1}"
        echo "NUMBER2=${NUMBER2}"
      env:
        NUMBER1: ${{ github.event.inputs.number1 }}
        NUMBER2: ${{ github.event.inputs.number2 }}

    - name: Start Node server in background
      # run: |
      #   nohup npm start > server.log 2>&1 &
      #   sleep 5
      #   curl --fail http://localhost:3000/status || (echo "Server failed to start" && exit 1)
      run: |
        npm start &
      env:
        INPUT_NUMBER1: ${{ github.event.inputs.number1 }}
        INPUT_NUMBER2: ${{ github.event.inputs.number2 }}

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-node-${{ matrix.node-version }}
        path: coverage/ # Upload the entire coverage directory


  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: buil-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GHCR login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Container Registry push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # tags: ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ github.sha }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/my-node-app:${{ github.sha }}
      
      - name: Run Docker container in background
        run: docker run -d -p 3000:3000 --name live-app ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ github.sha }}
      
      - name: Replace image tag with Git SHA
        run: |
          sed -i "s|__BUILD_SHA__|${{ github.sha }}|g" k8s/deployment.yaml

      - name: Wait for app to be ready
        run: |
          for i in {1..10}; do
            curl --fail http://localhost:3000/status && exit 0
            sleep 2
          done
          echo "App did not become ready" && exit 1
  
  terraform-eks:
    if: ${{ github.event.inputs.run_terraform == 'true' }}
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Apply or Destroy Terraform
        run: |
          if [[ "${{ github.event.inputs.destroy }}" == "true" ]]; then
            echo "Destroying infrastructure..."
            terraform destroy -auto-approve
          else
            echo "Applying infrastructure..."
            terraform apply -auto-approve
          fi
      
      - name: Install kubectl and check EKS status
        if: github.event.inputs.destroy != 'true'
        run: |
          curl -LO https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

          aws eks update-kubeconfig --region ap-southeast-2 --name github-actions-eks

          echo "Checking Kubernetes nodes..."
          kubectl get nodes

          echo "Checking component statuses..."
          kubectl get componentstatuses

          echo "Listing kube-system pods..."
          kubectl get pods -n kube-system
    
